{"ast":null,"code":"var _jsxFileName = \"/home/swapnil/Desktop/React/vidly/src/components/movies.jsx\";\nimport React, { Component } from \"react\";\nimport { getMovies } from \"./services/fakeMovieServices\";\nimport { getGenres } from \"./services/fakeGenreServices\";\nimport Pagination from \"./common/pagination\";\nimport { paginate } from \"../utils/paginate\";\nimport ListGroup from \"./common/listGroup\";\nimport MoviesTable from \"./common/moviesTable\";\nimport _ from \"lodash\";\nimport { Link } from \"react-router-dom\";\n\nclass Movies extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movies: getMovies(),\n      pageSize: 4,\n      currentPage: 1,\n      genres: [],\n      sortColumn: {\n        path: \"title\",\n        order: \"asc\"\n      }\n    };\n\n    this.handleDelete = movie => {\n      console.log(movie);\n      const movies = this.state.movies.filter(m => m._id !== movie._id);\n      this.setState({\n        movies\n      });\n    };\n\n    this.handleLike = movie => {\n      const movies = [...this.state.movies];\n      const index = movies.indexOf(movie);\n      movies[index] = { ...movies[index]\n      };\n      movies[index].liked = !movies[index].liked;\n      this.setState({\n        movies\n      });\n    };\n\n    this.handlePageChange = page => {\n      this.setState({\n        currentPage: page\n      });\n    };\n\n    this.handleGenreSelect = genre => {\n      this.setState({\n        selectedGenre: genre,\n        searchQuery: \"\",\n        currentPage: 1\n      });\n    };\n\n    this.handleSort = sortColumn => {\n      this.setState({\n        sortColumn\n      });\n    };\n\n    this.handleSearch = query => {\n      this.setState({\n        searchQuery: query,\n        selectedGenre: null,\n        currentPage: 1\n      });\n    };\n\n    this.getPagedDate = () => {\n      const {\n        pageSize,\n        currentPage,\n        selectedGenre,\n        movies: allmovies,\n        sortColumn\n      } = this.state;\n      const filtered = selectedGenre && selectedGenre._id ? allmovies.filter(m => m.genre._id === selectedGenre._id) : allmovies;\n\n      const sorted = _.orderBy(filtered, [sortColumn.path], [sortColumn.order]);\n\n      const movies = paginate(sorted, currentPage, pageSize);\n      return {\n        totalCount: filtered.length,\n        data: movies\n      };\n    };\n  }\n\n  componentDidMount() {\n    const genres = [{\n      name: \"All Genres\"\n    }, ...getGenres()];\n    this.setState({\n      genres\n    });\n  }\n\n  render() {\n    const {\n      length: count\n    } = this.state.movies;\n    const {\n      pageSize,\n      currentPage,\n      sortColumn\n    } = this.state;\n    if (count === 0) return /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 29\n      }\n    }, \"There are no movies in the database.\");\n    const {\n      totalCount,\n      data: movies\n    } = this.getPagedDate();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ListGroup, {\n      items: this.state.genres,\n      selectedItem: this.state.selectedGenre,\n      onItemSelect: this.handleGenreSelect,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/movies/new\",\n      className: \"btn btn-primary\",\n      style: {\n        marginBottom: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }\n    }, \"New Movie\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    }, \"Showing \", totalCount, \" movies in the database.\"), /*#__PURE__*/React.createElement(SearchBox, {\n      value: searchQuery,\n      onChange: this.handleSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(MoviesTable, {\n      movies: movies,\n      sortColumn: sortColumn,\n      onLike: this.handleLike,\n      onDelete: this.handleDelete,\n      onSort: this.handleSort,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Pagination, {\n      itemsCount: totalCount,\n      pageSize: pageSize,\n      onPageChange: this.handlePageChange,\n      currentPage: currentPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default Movies;","map":{"version":3,"sources":["/home/swapnil/Desktop/React/vidly/src/components/movies.jsx"],"names":["React","Component","getMovies","getGenres","Pagination","paginate","ListGroup","MoviesTable","_","Link","Movies","state","movies","pageSize","currentPage","genres","sortColumn","path","order","handleDelete","movie","console","log","filter","m","_id","setState","handleLike","index","indexOf","liked","handlePageChange","page","handleGenreSelect","genre","selectedGenre","searchQuery","handleSort","handleSearch","query","getPagedDate","allmovies","filtered","sorted","orderBy","totalCount","length","data","componentDidMount","name","render","count","marginBottom"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { getMovies } from \"./services/fakeMovieServices\";\nimport { getGenres } from \"./services/fakeGenreServices\";\nimport Pagination from \"./common/pagination\";\nimport { paginate } from \"../utils/paginate\";\nimport ListGroup from \"./common/listGroup\";\nimport MoviesTable from \"./common/moviesTable\";\nimport _ from \"lodash\";\nimport { Link } from \"react-router-dom\";\n\nclass Movies extends Component {\n  state = {\n    movies: getMovies(),\n    pageSize: 4,\n    currentPage: 1,\n    genres: [],\n    sortColumn: { path: \"title\", order: \"asc\" },\n  };\n  componentDidMount() {\n    const genres = [{ name: \"All Genres\" }, ...getGenres()];\n\n    this.setState({ genres });\n  }\n\n  handleDelete = (movie) => {\n    console.log(movie);\n    const movies = this.state.movies.filter((m) => m._id !== movie._id);\n    this.setState({ movies });\n  };\n  handleLike = (movie) => {\n    const movies = [...this.state.movies];\n    const index = movies.indexOf(movie);\n    movies[index] = { ...movies[index] };\n    movies[index].liked = !movies[index].liked;\n    this.setState({ movies });\n  };\n\n  handlePageChange = (page) => {\n    this.setState({ currentPage: page });\n  };\n  handleGenreSelect = (genre) => {\n    this.setState({ selectedGenre: genre, searchQuery: \"\", currentPage: 1 });\n  };\n  handleSort = (sortColumn) => {\n    this.setState({ sortColumn });\n  };\n  handleSearch = (query) => {\n    this.setState({ searchQuery: query, selectedGenre: null, currentPage: 1 });\n  };\n\n  getPagedDate = () => {\n    const {\n      pageSize,\n      currentPage,\n      selectedGenre,\n      movies: allmovies,\n      sortColumn,\n    } = this.state;\n    const filtered =\n      selectedGenre && selectedGenre._id\n        ? allmovies.filter((m) => m.genre._id === selectedGenre._id)\n        : allmovies;\n    const sorted = _.orderBy(filtered, [sortColumn.path], [sortColumn.order]);\n    const movies = paginate(sorted, currentPage, pageSize);\n    return { totalCount: filtered.length, data: movies };\n  };\n\n  render() {\n    const { length: count } = this.state.movies;\n    const { pageSize, currentPage, sortColumn } = this.state;\n    if (count === 0) return <p>There are no movies in the database.</p>;\n    const { totalCount, data: movies } = this.getPagedDate();\n    return (\n      <div className=\"row\">\n        <div className=\"col-3\">\n          <ListGroup\n            items={this.state.genres}\n            selectedItem={this.state.selectedGenre}\n            onItemSelect={this.handleGenreSelect}\n          />\n        </div>\n        <div className=\"col\">\n          <Link\n            to=\"/movies/new\"\n            className=\"btn btn-primary\"\n            style={{ marginBottom: 20 }}\n          >\n            New Movie\n          </Link>\n          <p>Showing {totalCount} movies in the database.</p>\n          <SearchBox value={searchQuery} onChange={this.handleSearch} />\n          <MoviesTable\n            movies={movies}\n            sortColumn={sortColumn}\n            onLike={this.handleLike}\n            onDelete={this.handleDelete}\n            onSort={this.handleSort}\n          />\n          <Pagination\n            itemsCount={totalCount}\n            pageSize={pageSize}\n            onPageChange={this.handlePageChange}\n            currentPage={currentPage}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Movies;\n"]},"metadata":{},"sourceType":"module"}